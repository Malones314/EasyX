#include<graphics.h>
#include<Windows.h>
#include<time.h>
#include<iostream>
const double PI = 3.1415926535897932;
const double oneAngle = PI / 180.0;
using namespace std;
void HSleep ( int sleepTime ) {
	auto oldClock = clock ( );
	oldClock += sleepTime + CLOCKS_PER_SEC / 1000;
	if ( oldClock < clock ( ) )
		oldClock = clock ( );
	else
		while ( oldClock > clock ( ) )
			Sleep ( 1 );
}
void setClockLine ( int cneterX, int centerY, int radius);
int main ( ) {
	const double radius = 180;
	const double x0 = 20;
	const double y0 = 20;
	const int width = 400;
	const int hight = 400;
	initgraph ( width, hight );
	setorigin ( 0, hight );
	setaspectratio ( 1, -1 );
	int totalSecond;
	const int circleCenterX = 200;
	const int circleCenterY = 200;
	circle ( circleCenterX, circleCenterY, radius );
	setClockLine ( circleCenterX, circleCenterY, radius );

	int hWidth = 9;
	int mWidth = 5;
	int sWidth = 1;
	
	const int hRadius = 80;
	const int mRadius = 90;
	const int sRadius = 110;
	double angleH;
	double angleM;
	double angleS;
	totalSecond = time ( 0 ) % ( 24 * 3600 );   //一天中的多少秒
	angleS = totalSecond % 60 * oneAngle * 6;
	angleS = 0.5 * PI - angleS;
	angleM = totalSecond * oneAngle * 0.1;
	angleM = 0.5 * PI - angleM;
	angleH = ( totalSecond / 3600 + 8 ) * oneAngle * 30;
	angleH = 0.5 * PI - angleH;
	while ( 1 ) {
		clearcircle ( circleCenterX, circleCenterY, 140 );
		fillcircle ( circleCenterX, circleCenterY, 7 );
		angleS -= 6 * oneAngle;
		angleM -= 0.1 * oneAngle;
		angleH -= 1 / 120.0 * oneAngle;
		setlinestyle ( PS_SOLID, sWidth );
		line ( circleCenterX, circleCenterY, circleCenterX + sRadius * cos ( angleS ), circleCenterY + sRadius * sin ( angleS ) );
		setlinestyle ( PS_SOLID, mWidth );
		line ( circleCenterX, circleCenterY, circleCenterX + mRadius * cos ( angleM ), circleCenterY + mRadius * sin ( angleM ) );
		setlinestyle ( PS_SOLID, hWidth );
		line ( circleCenterX, circleCenterY, circleCenterX + hRadius * cos ( angleH ), circleCenterY + hRadius * sin ( angleH ) );
		HSleep ( 1000 );
	}
	cin >>  sWidth;

	closegraph ( );
	return 0;
}     
void setClockLine ( int centerX, int centerY, int radius){
	double angle = 0;
	int shortLine = 15;
	int longLine = 40;
	setlinecolor ( YELLOW );
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - longLine ) * cos ( angle ), centerY + ( radius - longLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - longLine ) * cos ( angle ), centerY + ( radius - longLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - longLine ) * cos ( angle ), centerY + ( radius - longLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - longLine ) * cos ( angle ), centerY + ( radius - longLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
	line ( centerX + radius * cos ( angle ), centerY + radius * sin ( angle ), centerX + ( radius - shortLine ) * cos ( angle ), centerY + ( radius - shortLine ) * sin ( angle ) );
	angle += PI / 6.0;
}
