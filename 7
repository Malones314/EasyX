//7
#include<graphics.h>
#include<math.h>
#include<Windows.h>
#include<string>
const double PI = 3.1415926535897932;
void getXY ( int width, int hight, int x0, int y0, int step, int originX0, int originY0, int originX, int originY );
int main ( ) {
	const int width = 1100;
	const int hight = 580;
	initgraph ( width, hight );

	//设置坐标系参数
	const int originX0 = 0;
	const int originY0 = hight;
	const int originX = 1;
	const int originY = -1;
	//设置原点和单元格长度
	const int x0 = 20;
	const int y0 = 20;
	const int step = 20;   

	setorigin ( originX0, originY0 );
	setaspectratio ( originX, originY );
	
	getXY ( width, hight, x0, y0, step, originX0, originY0, originX, originY );

	//绘画等比螺线
	setlinestyle ( PS_SOLID );
	setlinecolor ( WHITE );
	double originRadius = 26.0*step;   //初始半径设置
	double originCenterX = x0 + 24 * step;
	double originCenterY = y0;
	double centerX = originCenterX;
	double centerY = originCenterY;
	double radius = originRadius;
	double angle = 0;
	double x, y;
	while ( 1 ) {
		while ( radius > 5 ) {
			angle = 0;
			//putpixel ( x, y, RED );
			while ( angle < 0.5 * PI ) {
				x = centerX + radius * cos ( angle );
				y = centerY + radius * sin ( angle );
				line ( centerX, centerY, x, y );
				angle += 0.01 / ( 2 * PI );
				Sleep ( 2 );
			}
			centerY = centerY + 0.382 * radius;
			radius = 0.618 * radius;
			while ( angle < PI ) {
				x = centerX + radius * cos ( angle );
				y = centerY + radius * sin ( angle );
				line ( centerX, centerY, x, y );
				angle += 0.01 / ( 2 * PI );
				Sleep ( 2 );
			}
			centerX = centerX - 0.382 * radius;
			radius = 0.618 * radius;
			while ( angle < 1.5 * PI ) {
				x = centerX + radius * cos ( angle );
				y = centerY + radius * sin ( angle );
				line ( centerX, centerY, x, y );
				angle += 0.01 / ( 2 * PI );
				Sleep ( 2 );
			}
			centerY = centerY - 0.382 * radius;
			radius = 0.618 * radius;
			while ( angle < 2 * PI ) {
				x = centerX + radius * cos ( angle );
				y = centerY + radius * sin ( angle );
				line ( centerX, centerY, x, y );
				angle += 0.01 / ( 2 * PI );
				Sleep ( 2 );
			}
			centerX = centerX + 0.382 * radius;
			radius *= 0.618;
		}
		//半径长度小于1刷新界面重新绘制
		cleardevice ( );
		getXY ( width, hight, x0, y0, step, originX0, originY0, originX, originY );
		radius = originRadius;
		centerX = originCenterX;
		centerY = originCenterY;
	}
	Sleep ( 10000 );
	closegraph ( );
	return 0;
}
void getXY ( int width, int hight, int x0, int y0, int step, int originX0, int originY0, int originX, int originY ) { 
//打印坐标轴
	line ( x0, y0, width, y0 );
	line ( x0, y0, x0, hight );
	int t = x0 + step;
	setlinestyle ( PS_DASH );
	setlinecolor ( YELLOW );

	//打印坐标轴内部虚黄线

	while ( t < hight ) {
		line ( x0, t, width - step, t );
		t += step;
	}
	t = y0 + step;

	while ( t < width ) {
		line ( t, y0, t, hight - step );
		t += step;
	}

	TCHAR s [3];
	double sWidth;
	double sHight;
	double sBeginX;
	double sBeginY;

	//打印坐标轴侧边数字
	setorigin ( 0, 0 );
	setaspectratio ( 1, 1 );
	for ( t = hight / step - 2; t > 0; t-- ) {
		swprintf_s ( s, _T ( "%d" ), t );
		sWidth = textwidth ( s );
		sHight = textheight ( s );
		sBeginX = x0 - sWidth * 1.3;
		sBeginY = ( hight / step - 2 - t ) * step + sHight * 0.8;
		outtextxy ( sBeginX, sBeginY, s );
	}
	for ( t = 1; t < width / step - 1; t++ ) {
		swprintf_s ( s, _T ( "%d" ), t );
		sWidth = textwidth ( s );
		sHight = textheight ( s );
		sBeginX = x0 + t * step - sWidth * 0.5;
		sBeginY = hight - sHight * 1.1;
		outtextxy ( sBeginX, sBeginY, s );
	}
	swprintf_s ( s, _T ( "%d" ), 0 );
	sWidth = textwidth ( s );
	sHight = textheight ( s );
	sBeginX = x0 - sWidth * 1.5;
	sBeginY = hight - sHight * 1.3;
	outtextxy ( sBeginX, sBeginY, s );

	//坐标系重置
	setorigin ( originX0, originY0 );
	setaspectratio ( originX, originY );
	
	//线段风格重置
	setlinestyle ( PS_SOLID );
	setlinecolor ( WHITE );
}
