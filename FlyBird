#include<Windows.h>
#include<graphics.h>
#include<conio.h>
#include<time.h>
void HSleep ( int sleepTime ) {
	auto oldClock = clock ( );
	oldClock += sleepTime + CLOCKS_PER_SEC / 1000;
	if ( oldClock < clock ( ) )
		oldClock = clock ( );
	else
		while ( oldClock > clock ( ) )
			Sleep ( 1 );
}
int main ( ) {
	srand ( time ( 0 ) );
	const int width = 300;
	const int hight = 400;
	initgraph ( width, hight );
	setorigin ( 0, 400 );
	setaspectratio ( 1, -1 );
	const int lineLong = 220;
	const int step = 10;
	char c = '0';	
	int level = 0;
	const int radius = 5;
	int x0 = 150;
	int y0 = 200;
	const double T = 0.01;
	double t = 0;
	double x = x0;
	double y = y0;
	const double g = 30;
	const int v0X = 30, v0Y = 30;
	int vx, vy;
	setaspectratio ( 1, 1 );
	setorigin ( 0, 0 );
	outtextxy ( 60, 10, L"输入ad控制左右运动" );
	setorigin ( 0, 400 );
	setaspectratio ( 1, -1 );
	c = _getch ( );
	if ( c == 'a' ) {   //向左
		vx = -1*v0X ;
		t = 0;
		vy = v0Y;
		y0 = y;
		x0 = x;
	} else if ( c == 'd' ) {   //向右
		vx = v0X;
		t = 0;
		vy = v0Y;
		y0 = y;
		x0 = x;
	}
	POINT nextPL [4], nextPR [4], PL [4], PR [4];
	PL [3].x = rand ( ) % lineLong;
	PL [2].x = PL [3].x;
	PL [0].x = 0;
	PL [1].x = 0;
	PL [0].y = 300;
	PL [1].y = 300 + step;
	PL [2].y = 300 + step;
	PL [3].y = 300;

	PR [3].x = PL [3].x + 80;
	PR [2].x = PR [3].x;
	PR [0].x = 300;
	PR [1].x = 300;
	PR [0].y = 300;
	PR [1].y = 300 + step;
	PR [2].y = 300 + step;
	PR [3].y = 300;

	nextPL [3].x = rand ( ) % lineLong;
	nextPL [2].x = nextPL [3].x;
	nextPL [0].x = 0;
	nextPL [1].x = 0;
	nextPL [0].y = 500;
	nextPL [1].y = 500 + step;
	nextPL [2].y = 500 + step;
	nextPL [3].y = 500;

	nextPR [3].x = nextPL [3].x + 80;
	nextPR [2].x = nextPR [3].x;
	nextPR [0].x = 300;
	nextPR [1].x = 300;
	nextPR [0].y = 500;
	nextPR [1].y = 500 + step;
	nextPR [2].y = 500 + step;
	nextPR [3].y = 500;

	POINT p [4];
	p [0].x = 0;
	p [0].y = 0;
	p [1].x = width;
	p [1].y = 0;
	p [2].x = width;
	p [2].y = PL [0].y - 1;
	p [3].x = 0;
	p [3].y = PL [0].y - 1;

	POINT pp [4];
	pp [0].x = 0;
	pp [0].y = nextPL [0].y + 100;
	pp [1].x = width;
	pp [1].y = nextPL [0].y + 100;
	pp [2].x = width;
	pp [2].y = PL [2].y + 1;
	pp [3].x = 0;
	pp [3].y = PL [2].y + 1;
	
	while ( 1 ) {
		fillcircle ( x, y, 5 );
		polygon ( PL, 4 );
		polygon ( PR, 4 );
		polygon ( nextPL, 4 );
		polygon ( nextPR, 4 );
		if ( _kbhit ( ) ) {
			c = _getch ( );
			if ( c == 'a' ) {   //向左
				vx = -1 * v0X;
				t = 0;
				vy = v0Y;
				y0 = y;
				x0 = x;
				PL [0].y -= 30;
				PL [1].y -= 30;
				PL [2].y -= 30;
				PL [3].y -= 30;

				PR [0].y -= 30;
				PR [1].y -= 30;
				PR [2].y -= 30;
				PR [3].y -= 30;

				nextPL [0].y -= 30;
				nextPL [1].y -= 30;
				nextPL [2].y -= 30;
				nextPL [3].y -= 30;

				nextPR [0].y -= 30;
				nextPR [1].y -= 30;
				nextPR [2].y -= 30;
				nextPR [3].y -= 30;

				p [0].x = 0;
				p [0].y = 0;
				p [1].x = width;
				p [1].y = 0;
				p [2].x = width;
				p [2].y = PL [0].y - 1;
				p [3].x = 0;
				p [3].y = PL [0].y - 1;

				pp [0].x = 0;
				pp [0].y = nextPL [0].y + 10;
				pp [1].x = width;
				pp [1].y = nextPL [0].y + 10;
				pp [2].x = width;
				pp [2].y = PL [2].y + 1;
				pp [3].x = 0;
				pp [3].y = PL [2].y + 1;

			} else if ( c == 'd' ) {   //向右
				vx = v0X;
				t = 0;
				vy = v0Y;
				y0 = y;
				x0 = x;
				PL [0].y -= 30;
				PL [1].y -= 30;
				PL [2].y -= 30;
				PL [3].y -= 30;

				PR [0].y -= 30;
				PR [1].y -= 30;
				PR [2].y -= 30;
				PR [3].y -= 30;

				nextPL [0].y -= 30;
				nextPL [1].y -= 30;
				nextPL [2].y -= 30;
				nextPL [3].y -= 30;

				nextPR [0].y -= 30;
				nextPR [1].y -= 30;
				nextPR [2].y -= 30;
				nextPR [3].y -= 30;

				p [0].x = 0;
				p [0].y = 0;
				p [1].x = width;
				p [1].y = 0;
				p [2].x = width;
				p [2].y = PL [0].y - 1;
				p [3].x = 0;
				p [3].y = PL [0].y - 1;

				pp [0].x = 0;
				pp [0].y = nextPL [0].y + 10;
				pp [1].x = width;
				pp [1].y = nextPL [0].y + 10;
				pp [2].x = width;
				pp [2].y = PL [2].y + 1;
				pp [3].x = 0;
				pp [3].y = PL [2].y + 1;

			}
		}
		x = vx * t + x0;
		y = vy * t - 0.5 * g * t * t + y0;
		t += T;
		if ( ( x <= PL [3].x && y >= PL [3].y ) || ( x >= PR [3].x && y >= PR [3].y ) ||  x < 0 || x > width || y < 0 || y > hight  ) {
			setaspectratio ( 1, 1 );
			setorigin ( 0, 0 );
			cleardevice ( );
			char c = level + '0';
			outtextxy ( 60, 50, c );
			outtextxy ( 60, 10, L"你输了" );
			HSleep ( 100 );
			break;
		} else if ( ( x > PL [3].x && y > PL [3].y && x < PR [3].x && y > PR [3].y ) || ( x > PL [2].x && y > PL [2].y && x < PR [2].x && y > PR [2].y ) ) {
			PR [0].x = nextPR [0].x;
			PR [1].x = nextPR [1].x;
			PR [2].x = nextPR [2].x;
			PR [3].x = nextPR [3].x;
			PL [0].x = nextPL [0].x;
			PL [1].x = nextPL [1].x;
			PL [2].x = nextPL [2].x;
			PL [3].x = nextPL [3].x;
			PR [0].y = nextPR [0].y;
			PR [1].y = nextPR [1].y;
			PR [2].y = nextPR [2].y;
			PR [3].y = nextPR [3].y;
			PL [0].y = nextPL [0].y;
			PL [1].y = nextPL [1].y;
			PL [2].y = nextPL [2].y;
			PL [3].y = nextPL [3].y;
			nextPL [3].x = rand ( ) % lineLong;
			nextPL [2].x = nextPL [3].x;
			nextPL [0].x = 0;
			nextPL [1].x = 0;
			nextPL [0].y = PL [0].y+200;
			nextPL [1].y = PL [1].y+200;
			nextPL [2].y = PL [2].y+200;
			nextPL [3].y = PL [3].y+200;

			nextPR [3].x = nextPL [3].x + 80;
			nextPR [2].x = nextPR [3].x;
			nextPR [0].x = 300;
			nextPR [1].x = 300;
			nextPR [0].y = PR [0].y + 200;
			nextPR [1].y = PR [1].y + 200;
			nextPR [2].y = PR [2].y + 200;
			nextPR [3].y = PR [3].y + 200;
			level++;
			p [0].x = 0;
			p [0].y = 0;
			p [1].x = width;
			p [1].y = 0;
			p [2].x = width;
			p [2].y = PL [0].y - 1;
			p [3].x = 0;
			p [3].y = PL [0].y - 1;

			pp [0].x = 0;
			pp [0].y = nextPL [0].y + 10;
			pp [1].x = width;
			pp [1].y = nextPL [0].y + 10;
			pp [2].x = width;
			pp [2].y = PL [2].y + 1;
			pp [3].x = 0;
			pp [3].y = PL [2].y + 1;

		}
		clearpolygon ( pp, 4 );
		clearpolygon ( p, 4 );
		HSleep ( 6 );
	}
	_getch ( );
	closegraph ( );
	return 0;
}
