#include<graphics.h>
#include<math.h>
#include<conio.h>
#include<Windows.h>
#include<time.h>
void HSleep ( int sleepTime ) {
	auto oldClock = clock ( );
	oldClock += sleepTime + CLOCKS_PER_SEC / 1000;
	if ( oldClock < clock ( ) )
		oldClock = clock ( );
	else
		while ( oldClock > clock ( ) )
			Sleep ( 1 );
}
int main ( ) {
	srand ( time ( 0 ) );
	int i, j;
	const int width = 800;
	const int hight = 400;
	initgraph ( width, hight );
	const int starNumber = 100;
	double starH [starNumber] = { 0 };
	double starS [starNumber] = { 0 };
	double starL [starNumber] = { 0 };			//亮度
	double starV [starNumber] = { 0 };			//速度, 和亮度成正比
	double starX [starNumber] = { 0 };			//X坐标
	int starY [starNumber] = { 0 };					//Y坐标
	POINT full [4] = { { 0, 0 }, { 0, width }, { width, width }, { width, 0 } };
	for ( i = 0; i < starNumber; i++ ) {
		starH [i] = rand ( ) % 240;
		starS [i] = ( rand ( ) % 9 + 1 ) / 10.0;
		starL [i] = ( rand ( ) % 9 + 1 ) / 10.0;
		starV [i] = starL [i] * 20.0;
		starY [i] = rand ( ) % hight;
		starX [i] = rand ( ) % width;
	}
	while ( !_kbhit ( ) ) {
		for ( i = 0; i < starNumber; i++ ) {
			if ( starX [i] > width )
				starX [i] = 0.0;
			starX [i] += starV [i] * 1.0;
		}
		for ( i = 0; i < starNumber; i++ ) {
			setfillcolor ( HSLtoRGB ( starH [i], starS [i], starL [i] ) );
			solidcircle ( starX [i], starY [i], 2 );
		}
		HSleep ( 20 );
		clearpolygon ( full, 4 );
	}
	return 0;
}
